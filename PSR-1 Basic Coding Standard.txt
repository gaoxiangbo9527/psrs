规范的这一部分包括了应被认为是确保共享的 PHP 代码之间具有高水平的技术互操作性所需要的标准编程元素。

本文档中的关键字“必须”，“不能”，“需要”，“将会”，“将不会”，“应该”，“不应该”，“推荐”，“可以”和“可选”是按照 RFC 2119 中的描
述进行解释的。

1. 概览
  文件必须只使用 <?php 和 <?= 标签。
  对于 PHP 代码，文件必须只使用无 BOM 头的 UTF-8 编码。
  文件应该要么声明符号（类、函数、常量等），要么引发副作用（比如生成输出，改变 .ini 配置等），但是不应该两者都做。
  命名空间和类必须遵循一个 “自动加载” PSR ：[PSR-0，PSR-4]。
  类名必须被声明为 StudlyCaps 形式。
  类常量必须被声明为 “下划线分隔的全大写字母” 形式。
  方法名必须被声明为 camelCase 形式。
  
2. 文件
  2.1. PHP 标签
    PHP 代码必须使用长 <?php ?> 标签对或者短输出 <?= ?> 标签对；一定不能使用其他的标签变体。
    
  2.2. 字符编码
    PHP 代码必须只使用无 BOM 头的 UTF-8 编码。
    
  2.3. 副作用
    一个文件应该声明新的符号（类、函数、常量等）并且不会引起副作用，或者它应该执行带有副作用的逻辑，但是不应该两者都做。
    
    词语“副作用”指的是执行和声明类、函数、常量等不直接相关的逻辑，仅包含这样的文件。
    
    “副作用”包含但不限于：生成输出，显式使用 require 或 include，连接到外部的服务，修改 ini 设置，发出错误或者异常，修改
    全局或者静态变量，读取或写入文件，等等。
    
    下面是一个同时具有声明和副作用的文件的例子；也是一个要避免的例子：
      <?php
      // side effect: change ini settings
      ini_set('error_reporting', E_ALL);

      // side effect: loads a file
      include "file.php";

      // side effect: generates output
      echo "<html>\n";

      // declaration
      function foo()
      {
          // function body
      }
      
    下面的例子是一个包含声明而没有副作用的文件；也是一个要模仿的例子：
      <?php
      // declaration
      function foo()
      {
          // function body
      }

      // 条件声明不是一种副作用
      if (! function_exists('bar')) {
          function bar()
          {
              // function body
          }
      }
    
3. 命名空间名和类名
  命名空间和类必须遵循一个 “自动加载” PSR ：[PSR-0，PSR-4]。
  
  这意味着每个类都单独在一个文件中，并且在至少一个层级的名称空间中：一个顶级供应商名。
  
  类名必须被声明为 StudlyCaps 形式。
  
  为 PHP 5.3 及以后版本编写的代码必须使用正式的命名空间。例如：
    <?php
    // PHP 5.3 and later:
    namespace Vendor\Model;

    class Foo
    {
    }
    
  为 5.2.X 以及之前版本编写的代码应该使用“在类名上添加前缀 Vendor_”这种伪命名空间惯例。
    <?php
    // PHP 5.2.x and earlier:
    class Vendor_Model_Foo
    {
    }
  
4. 类常量，属性和方法
  术语“类”指的是所有的类、接口和特性。
  
  4.1 常量
    类常量必须被声明为 “下划线分隔的全大写字母” 形式。例如：
      <?php
      namespace Vendor\Model;

      class Foo
      {
          const VERSION = '1.0';
          const DATE_APPROVED = '2012-06-01';
      }
      
  4.2 属性
    本指南故意的避开了任何关于使用 $StudlyCaps、$camelCase 或 $under_score 属性名的建议。
    
    不论使用哪种命名惯例，都应该在某个合理的范围内一致地使用。这个范围可以是供应商级、包级、类级或者方法级。
    
  4.3 方法
    方法名必须被声明为 camelCase() 形式。
  